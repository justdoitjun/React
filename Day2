console.log(document.getElementbyId("result").innerHTML);
    console.log(document.getElementbyId("result")); 
    {/* //result라는 id가 없는데 이를 출력하라고 하면.... 그 결과는? */}
/// typeof로 확인할 수 있다. 

//alert 함수
// 함수가 내정함수가 있고, 사용자가 만든 함수는 사용자 정의 함수라고 함. 
// 시스템이 만든 함수는 내장함수고 그 의도대로 해야하겠지. 
// 함수를 만들 때 주의해야할 점은 함수는 조그마하게 만들어라. 더 작게 만들어ㅏ. 더더더더 작게 만들어라. 
// 이게 클린코드라는 책의 용어임. 

// 조그마한 조각들을 잘게잘게 만드는 것이 좋다. 프로그래밍도 한덩어리를 큰 덩어리로 만들기보다는 
// 만드는 게 중요한 것이 아니고 만들고나서 유지보수(디버깅)하는 것이 더 중요함. 
// 프로그래밍도 생물이야. 예를 들어 급여계산 프로그래밍을 만들었다면, 나중에 노동법과 시행령이 바뀌면 다 바꿔줘야함. 
// 그래서 프로그래밍할 때는 항상 생각해야할 점이.. 프로그래밍은 단순하게 만드는 게 중요한 게 아니가 유지보수가 쉽게 만들어야함. 

// 함수는 하나의 기능에 집중해야한다. 함수를 많이 만들면 프로그램 실행시간이 길어지지만, 어차피 하드웨어 업자들이 개선함. 
// 메세지가 있는 작은 창을 모달 창이라고 함. 따라서, 사용자는 모달 창 뒤의 창을 건드릴 수가 없음. 

// prompt함수는 함수가 실행되면 textmessage 입력 필드 확인 취소 버튼이 있는 모달창. 

//scanner next Int 컴퓨터는 거의 왠만하면 문자로 받는다. 
// 컴퓨터는 문자인지 숫자인지 구분할 수가 없다. 그래서 왠만한 것들을 전부 다 문자로 받아들임. 
// 자바스크립트는 어차피 다 웹이니깐 더더욱 이를 따질 필요가 없어서 promt함수는 문자로 input을 받는다. 

// else를 많이 안 쓰는 것이 좋다. confirm함수 
// confirm함수는 매개변수로 받은 질문과 확인 및 취소 버튼이 있는 모달 창을 보여줍니다. 이 때는 prompt와 달리 boolean값을 출력함. 

// 기억할 것. 두 개가 중요하다. alert와 confirm .
//String 타입은 객체이고, 숫자는 원시 타입이기 때문에 stirng은 숫자와 당연히 비굑할 수 없다. 
// 자바스크릡트는 형변환을 지 맘대로 해버린다.
// console.log로 출력할 때는 문자로 출력해버리고
// 규칙을 외울 필요는 없다. ture / false도 1 / 0 으로 바꿔줌(C언어가 boolean타입이 없어서 예전에 이렇게 했었음) 

// 자동 형변환을 피하고 싶다면, === 등호연산자(3개짜리)를 쓰거나 strict use를 쓰세요. 



// 함수는 자바의 클래스와 개념이 사실 많이 비슷하다. 
// 호출을 해야만 한다는 점이 인스턴스랑 비슷함. 

// 함수의 정의 및 선언 (매개변수는 매개변수 이름만 쓰자. )
// 보통 일반적으로 매개변수는 이제 느껴지겠지만 대부분 String이다. 
function sayHello(name){
    console.log(name);
}
// 함수 호출
sayHello("Jun");


//자바에 없는 기능. 자바에서는 매개변수의 타입이나 개수에 따라서 다른 유형의 함수를 많이 만들 수 있음. 
//자바 스크립트는 오버로딩 폐지. 같은 이름의 함수를 하나밖에 만듬. 그렇다면 대체 방안이 있어야할 거 아냐?
//대신에 매개변수에 기본값을 부여함. 대신에 기본값을 부여할 수 있다. 
//매개변수에 기본값을 부여한다. 함수호출시에 매개변수위치에 값을 주지 않으면 기본값을 적용하여 연산한다. 
//매개변수에 기본값을 부여할 때 기본값을 주지 않는 변수들을 먼저 기술하고
//기본값을 부여한느 변수들을 나중에 기술해야한다. 
//함수의 이름은 무조건 달라야한다. - 오버로딩을 지원하지 않지만
//기본값을 통해 오버로딩과 동일한 효과를 얻는다. 

function myFunc1(a, b,c){ // 기본값이 없는 함수. 
    return a + b+ c;
}
console.log(myFunc1()); //값이 없으니깐 NaN값 리턴
console.log(myFun1(1,2,3)); // 6 출력


function myFunc(a= 10, b = 20, c= 30){
    return a+b+c;
}
console.log(); // 10 + 20 + 30
console.log(1); // 1  + 20 + 30
console.log(1,2); // 1+ 2+ 30
console.log(1,2,3); // 1+ 2+ 3

// ********************************************************************************

//1~10까지의 합계를 구하는 함수
function sigma(limit){
    if(limit <0){               // 예외처리 간단한 팁 : 함수 들어가자마자 return으로 종료시켜줌. 간단한 팁이지만, 예외처리는 이렇게 처리를 해주는 게 좋다. 
        return;                 // 
    }
    sum = 0;
    for(i=1; i<=limit ; i++){
        sum = sum + i;
    }
    return sum; // 반환값은 하나 또는 아예 못 보낼 수 있다. 
}

//배열은 하나다. 배열은 주소값만 받므면 된다. 

console.log(sigma(100)); // 1~100까지 합계
console.log(sigma(1000)); // 1~1000까지 합계


// ********************************************************************************
// 새로나온 문법 : 
function showMessage(text){
    if(text === undefined){
        text = ` 빈 문자열 `;
    }                           // 위는 옛날식 코딩. 옛날엔 이렇게 처리를 했다. 
    text = text || `빈 문자열`;   // 새로 나온 문법. 지금은 이렇게 처리한다. 
    console.log(text);
}

showMesaage();  //undefined
showMessage("안녕하세요");      // 

// 함수 이름은 대개 동사를 사용하고, 이름은 가능한 간결하고 명확하게 써야합니다. 
// 함수는 동작 하나만 담당해야합니다. 함수 이름에 언급되어 있는 동작을 정확히 수행해야합니다. 

// *******************************************************************************************
//함수표현식 (= 일회용 함수 )=---> 극단화된 것이 람다식(화살표함수)

let add = function (a, b){
    return a + b;
}
console.log(add(4,5));  
//물론 이렇게 써도 일회용 함수이긴 합니다. 하지만, 매번 저렇게 선언을 해야하는 거고 메모리에도 영향이 없습니다. 
//즉, 위처럼 함수선언문 형식으로 선언하면 함수가 독립된 구문 형태로 존재하지만, 
//함수 표현식방식으로 함수를 생성하면, 함수가 표현식의 일부로 존재하고 블록 내 어디든 활용 가능합니다. 

// 화살표 함수로 다 대체가 안되는 이유는 뭘까? 화살표 함수가 더 효율적인 것 같은데, 화살표함수는 this를 쓸 수가 없다.... 그 외의 경우엔 화살표함수를 모두 쓸 수 있습니다. 
// 비교적 간단한 경우에 유용하다. 
//함수가 늘어나면 늘어날수록 함수는 메모리를 차지합니다. 따라서 쓰고 버리는 일회용 함수가 생기기 시작합니다. 그게 바로 함수의 표현식이고
//이 함수표현식에서 업그레이드된 개념이 화살표함수입니다. 

//JSON 매우매우 중요한 JSON
// JSON은 자바의 HashMap과 유사함. 파이썬가면 dictionary랑 똑같음. 

let person = {"name" : "hong", "age" :23, 'kor':95, eng:97, mat:100};
console.log(person.name, person.age, person,kor, person.eng, oersib,nat);       //(1)
console.log(person["name"], person["age"], person["kor"], person["eng"], person["mat"]); //(2)   (1)과 (2)는 동일한 개념이다. 

person.total = person.kor + person. eng + person.mat;
person.avg = person.total / 3;

console.log(`${person.name}의 총점은 ${person.total} 평균은 ${person.avg}입니다.`)


//JSON 객체배열
//JSON도 배열을 담을 수 있고, 배열 안에 JSON을 담을 수 있습니다. 
// {nsj_kwd: {code: "RSJ", query: "나스닥", session_key: "ZCKWFTP0pIxiH_1w2_FJMQAAADY",…}}
// nsj_kwd
// : 
// {code: "RSJ", query: "나스닥", session_key: "ZCKWFTP0pIxiH_1w2_FJMQAAADY",…}
// code
// : 
// "RSJ"
// query
// : 
// "나스닥"
// relkey
// : 
// ["다우지수", "비트코인", "나스닥 선물", "코스피", "나스닥선물 실시간", "테슬라", "나스닥 이란", "나스닥 개장시간", "유럽증시", "나스닥 100", "다우존스",…]
// session_key
// : 
// "ZCKWFTP0pIxiH_1w2_FJMQAAADY"

// *******************************************************************************************


let s = [
    {name : "hong", kor : 90, eng : 80, mat : 70},
    {name : "kang", kor : 90, eng : 80, mat : 70},
    {name : "jang", kor : 90, eng : 80, mat : 70},
    {name : "lim", kor : 90, eng : 80, mat : 70},
    {name : "choi", kor : 90, eng : 80, mat : 70}
];

for(i=0; i<s.length; i++){
    console.log(s[i].total = s[i].kor + s[i].eng + s[i].mat);
}
for(i=0; i<s.length; i++){
    console.log(`${s[i].name}   ${s[i].total}`);
}
for(i in s){
    console.log(`${s[i].name}   ${s[i].total}`);
}
for(item of s){
    console.log(`${s[i].name}   ${s[i].total}`);
}
s.forEach( (e)=> {
    console.log(`${s[i].name}   ${s[i].total}`)
});             // 이 위의 5가지 방법은 모두 결과가 똑같다. 그러나 가장 많이 사용하는 것은 바로 forEach구문이다. 

// *******************************************************************************************


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>for연습1    </h1>
</body>
</html>
<script>
// =========================================================================
    let flowers = ["작약", "백일홍", "천일홍", "장미", "미국"];
    console.log(flowers);
    for(i=0 ; i<flowers.length ; i++){
        console.log(i, flowers[i]);
    }
    for( i of flowers) { // 배열의 요소를 하나씩 가져온다. 
        console.log(i);
    }
    for ( i of flowers){ // in 연산자는 배열의 인덱스를 가져온다. 
        console.log(i, flowers[i]); 
    }

// =========================================================================
    //forEach 구문은 매개변수로 함수가 전달된다. 
    // 매개체가 되는 변수, 함수외부에서 함수내부로 값을 전달할 때 쓰이는 변수이다. 
    //자바는 참조변수를 객체
    // 인터페이스는 실체가 없는데 인터페이스 안에다 기술하는 것이 일종의 변수. 
    //변수에다 함수를 넣을 수가 있었어요. 

    // 함수의 메모리로 저장할 수 있다. 


//함수에 값을 전달하려면 변수가 있어야하나는데, 이 매개변수가 함수가 들어갈 수 있다. 
//변수말고 함수 
//forEach구문 안에 함수가 있어서 
//forEach함수에 함수를 주는 것. 매개변수 하나 리턴값 없는 함수를 줘야함. 
//그래서 주로 출력용으로 쓴다. 

flowers.forEach( (x)=> {
        console.log(x);
    }) // 반환값이 없는 함수만 들어갈 수 있음. 위처럼 console.log만 들어갈 수 있음. 만약 반환값이 있는 함수를 쓰더라도 아무 의미가 없음. 
//forEach도 함수이다. 

flowers.forEach( (x, i) => {
    console.log(x, i);
})

// =========================================================================
// break는 가장 가까운 for while 

let flag = false;
i = 1;
j = 1;
while(ture){// (1) 
    i++
    while(ture){ // (2)_
        j++;
        if(j>5){
            flag = true;
            break;     // 해당 break는 가장 가까운 j++ (2)를 끝내준다. 
        }
    }
    if(flag){ // (3)
        break;      
    }
}
// =========================================================================
// switch(수식) {
//     case 값1 : 
//     진술문1 ; 
//     break;
// }

// =========================================================================


</script>
